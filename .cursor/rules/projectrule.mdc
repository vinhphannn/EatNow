---
alwaysApply: true

# PROJECT_RULES.md

description: >
  Quy tắc phát triển dự án EatNow – đảm bảo code thống nhất, hiệu năng, dễ bảo trì.
  Áp dụng cho toàn bộ frontend, backend, và mobile.

globs:
  - "frontend/**"
  - "backend/**"
  - "mobile/**"
alwaysApply: true

rules:

  ## 1. Quy tắc code tổng quát
  - Tất cả code phải tối giản, không dư thừa thư viện hoặc hàm trùng logic.
  - Mỗi file thực hiện **1 nhiệm vụ rõ ràng** (single responsibility).
  - Đặt tên biến, hàm, class, component bằng **camelCase** (hoặc PascalCase với React component).
  - Comment luôn bằng **tiếng Việt ngắn gọn**, nêu rõ mục đích, không mô tả hiển nhiên.

  ## 2. Frontend (Next.js + React)
  - Ưu tiên **server components** khi không cần state động để tăng hiệu năng.
  - Reuse component ở `src/components`, không tạo lại trừ khi khác hành vi.
  - Hook logic (fetch API, socket, form) phải nằm trong `src/hooks/` và có prefix `use`.
  - API gọi qua `src/services/api.client.ts` để đồng bộ error handling và base URL.
  - Chú thích UI (Tailwind + MUI) rõ ràng, tránh CSS inline trùng lặp.
  - Không lưu state toàn cục nếu không cần (dùng Context hoặc prop drilling đúng chỗ).

  ## 3. Backend (NestJS + MongoDB)
  - Mỗi domain là 1 module riêng (vd: cart, order, restaurant, driver, admin).
  - Tách rõ `controller`, `service`, `schema`, `dto`.
  - **Không dùng populate lồng nhau nhiều tầng**; thay bằng join logic ở service.
  - **Tất cả controller phải có guard** (`JwtAuthGuard`, `RoleGuard`).
  - DTO phải validate bằng `class-validator` và có type rõ ràng.
  - Response chuẩn:
    ```ts
    return { data, message?: string, meta?: any }
    ```
  - Hạn chế query nặng; dùng index ở các trường hay lọc (userId, restaurantId, status).

  ## 4. Database (Mongo)
  - Tạo index với các trường truy vấn thường xuyên.
  - Không để quan hệ nhiều-nhiều phức tạp; thay bằng collection tách (vd: Cart, CartItem).
  - Snapshot dữ liệu động (vd: tên món, giá) khi cần để tránh sai lệch sau này.

  ## 5. Hiệu năng & Clean Code
  - API phải trả lời trong <300ms khi có thể (ưu tiên aggregate thay vì nhiều query).
  - Cache kết quả không đổi (vd: danh mục, featured collections) ở frontend/localStorage.
  - Code phải **tự mô tả**, không giải thích “cách làm”, chỉ nêu “vì sao”.
  - Tự động format code bằng `prettier` + `eslint` trước khi commit.

  ## 6. Comment & Doc
  - Mỗi hàm public phải có comment ngắn:
    ```ts
    // Hàm này lấy danh sách món ăn theo quán, có filter theo danh mục
    ```
  - Viết tài liệu cấu trúc hệ thống vào `PROJECT_CONTEXT.md`, luôn cập nhật khi thêm module mới.
  - Mỗi commit mô tả rõ thay đổi (vd: `[cart] tách giỏ hàng theo quán`).

  ## 7. Testing & Review
  - Test quan trọng (auth, order, payment) phải có Jest test cơ bản.
  - Không merge code nếu chưa qua lint + test pass.
  - Khi sửa bug, thêm test mô phỏng lại case đó.

  ## 8. Workflow AI / Cursor
  - Trước khi tạo code mới, AI phải đọc `PROJECT_CONTEXT.md` và `PROJECT_RULES.md`.
  - Khi phát hiện thay đổi cấu trúc hoặc công nghệ, tự động cập nhật file `PROJECT_CONTEXT.md`.
  - Code sinh ra phải tuân thủ quy tắc này: tối giản, hiệu năng, có comment tiếng Việt.


---
