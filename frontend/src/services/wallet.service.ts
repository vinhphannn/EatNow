import { apiClient } from './api.client';

/**
 * Wallet Service - X·ª≠ l√Ω v√≠ v√† thanh to√°n
 * 
 * APIs:
 * - GET /wallet/balance - L·∫•y s·ªë d∆∞
 * - GET /wallet/transactions - L·ªãch s·ª≠ giao d·ªãch
 * - POST /payment/deposit - N·∫°p ti·ªÅn
 * - POST /payment/withdraw - R√∫t ti·ªÅn
 * - POST /payment/order - Thanh to√°n ƒë∆°n h√†ng
 */

export interface WalletBalance {
  balance: number;
  pendingBalance: number;
  totalDeposits: number;
  totalWithdrawals: number;
  isActive: boolean;
}

export interface WalletTransaction {
  _id: string;
  type: 'deposit' | 'withdraw' | 'order_payment' | 'order_revenue' | 'commission' | 'platform_fee' | 'refund';
  amount: number;
  description: string;
  status: 'pending' | 'completed' | 'failed' | 'cancelled';
  provider?: string;
  providerPaymentUrl?: string;
  orderId?: string;
  orderCode?: string;
  metadata?: any;
  createdAt: string;
  updatedAt: string;
}

export interface DepositResponse {
  success: boolean;
  transactionId: string;
  paymentUrl?: string;
  redirectUrl?: string;
  message?: string;
}

export interface WithdrawResponse {
  success: boolean;
  transactionId: string;
  status: string;
  message: string;
}

export interface PaymentUrlResponse {
  success: boolean;
  transactionId: string;
  paymentUrl?: string;
  redirectUrl?: string;
}

class WalletService {
  /**
   * L·∫•y th√¥ng tin v√≠
   * GET /api/v1/wallet/balance
   */
  async getBalance(): Promise<WalletBalance> {
    try {
      console.log('üîç WalletService: Calling getBalance API...');
      const response: any = await apiClient.get('/customer/wallet/balance');
      console.log('üîç WalletService: Full response:', response);
      console.log('üîç WalletService: Response data:', response.data);
      console.log('üîç WalletService: Response status:', response.status);
      
      // API client tr·∫£ v·ªÅ data tr·ª±c ti·∫øp, kh√¥ng ph·∫£i response.data
      if (!response) {
        throw new Error('API tr·∫£ v·ªÅ undefined');
      }
      
      return response; // Tr·∫£ v·ªÅ response tr·ª±c ti·∫øp
    } catch (error: any) {
      console.error('üîç WalletService: getBalance error:', error);
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ l·∫•y s·ªë d∆∞ v√≠');
    }
  }

  /**
   * L·∫•y l·ªãch s·ª≠ giao d·ªãch
   * GET /api/v1/customer/wallet/transactions?limit=50
   */
  async getTransactions(limit: number = 50): Promise<WalletTransaction[]> {
    try {
      console.log('üîç WalletService: Calling getTransactions API...');
      const response: any = await apiClient.get(`/customer/wallet/transactions?limit=${limit}`);
      console.log('üîç WalletService: Transactions response:', response);
      return response; // API client tr·∫£ v·ªÅ data tr·ª±c ti·∫øp
    } catch (error: any) {
      console.error('üîç WalletService: getTransactions error:', error);
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ giao d·ªãch');
    }
  }

  /**
   * N·∫°p ti·ªÅn v√†o v√≠ qua MoMo
   * POST /api/v1/payment/deposit
   */
  async deposit(amount: number, provider: string = 'momo'): Promise<DepositResponse> {
    try {
      console.log('WalletService: Calling deposit API with:', { amount, provider, ownerType: 'customer' });
      
      const response: any = await apiClient.post('/payment/deposit', {
        amount,
        provider,
        ownerType: 'customer',
      });
      
      console.log('WalletService: Full API response:', response);
      console.log('WalletService: Response data:', response.data);
      
      // API client tr·∫£ v·ªÅ response tr·ª±c ti·∫øp, kh√¥ng wrap trong .data
      return response;
    } catch (error: any) {
      console.error('WalletService: Deposit error:', error);
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ n·∫°p ti·ªÅn');
    }
  }

  /**
   * R√∫t ti·ªÅn t·ª´ v√≠
   * POST /api/v1/payment/withdraw
   */
  async withdraw(amount: number, provider: string = 'momo', phoneNumber?: string): Promise<WithdrawResponse> {
    try {
      const response: any = await apiClient.post('/payment/withdraw', {
        amount,
        provider,
        phoneNumber,
      });
      
      return response.data;
    } catch (error: any) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ r√∫t ti·ªÅn');
    }
  }

  /**
   * Thanh to√°n ƒë∆°n h√†ng
   * POST /api/v1/payment/order
   */
  async payOrder(orderId: string, amount: number, orderCode: string, restaurantId: string): Promise<PaymentUrlResponse> {
    try {
      const response: any = await apiClient.post('/payment/order', {
        orderId,
        amount,
        orderCode,
        restaurantId,
      });
      
      return response.data;
    } catch (error: any) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ thanh to√°n ƒë∆°n h√†ng');
    }
  }

  /**
   * X√°c nh·∫≠n n·∫°p ti·ªÅn (manual confirm for testing)
   * POST /api/v1/payment/confirm-deposit
   */
  async confirmDeposit(transactionId: string): Promise<{ success: boolean; message: string; transactionId?: string }> {
    try {
      const response: any = await apiClient.post('/payment/confirm-deposit', {
        transactionId,
      });
      
      return response;
    } catch (error: any) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ x√°c nh·∫≠n n·∫°p ti·ªÅn');
    }
  }

  /**
   * Ki·ªÉm tra tr·∫°ng th√°i giao d·ªãch
   * GET /api/v1/payment/check/:transactionId
   */
  async checkTransaction(transactionId: string): Promise<{ success: boolean; transaction?: any; message?: string }> {
    try {
      const response: any = await apiClient.get(`/payment/check/${transactionId}`);
      return response;
    } catch (error: any) {
      throw new Error(error.response?.data?.error || 'Kh√¥ng th·ªÉ ki·ªÉm tra giao d·ªãch');
    }
  }

  /**
   * Format s·ªë ti·ªÅn VND
   */
  formatCurrency(amount: number): string {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND',
    }).format(amount);
  }

  /**
   * Format date
   */
  formatDate(dateString: string): string {
    return new Date(dateString).toLocaleDateString('vi-VN', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
    });
  }

  /**
   * Get transaction type label
   */
  getTransactionTypeLabel(type: string): string {
    const labels: Record<string, string> = {
      deposit: 'N·∫°p ti·ªÅn',
      withdraw: 'R√∫t ti·ªÅn',
      order_payment: 'Thanh to√°n ƒë∆°n h√†ng',
      order_revenue: 'Nh·∫≠n ti·ªÅn ƒë∆°n h√†ng',
      commission: 'Hoa h·ªìng',
      platform_fee: 'Ph√≠ platform',
      refund: 'Ho√†n ti·ªÅn',
    };
    return labels[type] || type;
  }

  /**
   * Get transaction status color
   */
  getTransactionStatusColor(status: string): string {
    const colors: Record<string, string> = {
      pending: 'text-yellow-600',
      completed: 'text-green-600',
      failed: 'text-red-600',
      cancelled: 'text-gray-600',
    };
    return colors[status] || 'text-gray-600';
  }
}

export const walletService = new WalletService();

