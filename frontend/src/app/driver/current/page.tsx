"use client";
import { useEffect, useMemo, useState } from "react";
import { driverService } from "@/services/driver.service";
import { OrderChat } from '@/components';

type UiOrder = {
    id: string;
    code: string;
    pickup: string;
    dropoff: string;
    cod: number;
    status: string;
    totalAmount?: number;
    deliveryFee?: number;
    subtotal?: number;
    tax?: number;
    discount?: number;
    createdAt?: string;
    restaurantAddress?: string;
    customerAddress?: string;
    customerPhone?: string;
    restaurantPhone?: string;
    items?: any[];
    orderNote?: string;
    deliveryNote?: string;
    paymentMethod?: string;
};

const statusConfig = {
    picking_up: { label: 'ƒêang l·∫•y h√†ng', color: 'bg-indigo-100 text-indigo-800', icon: 'üöó' },
    arrived_at_restaurant: { label: 'ƒê√£ ƒë·∫øn qu√°n', color: 'bg-blue-100 text-blue-800', icon: 'üè™' },
    picked_up: { label: 'ƒê√£ l·∫•y ƒë∆°n', color: 'bg-purple-100 text-purple-800', icon: 'üì¶' },
    arrived_at_customer: { label: 'ƒê√£ ƒë·∫øn v·ªã tr√≠ giao', color: 'bg-indigo-100 text-indigo-800', icon: 'üè†' },
    delivered: { label: 'ƒê√£ giao', color: 'bg-gray-100 text-gray-800', icon: 'üéâ' },
    cancelled: { label: 'ƒê√£ h·ªßy', color: 'bg-red-100 text-red-800', icon: '‚ùå' },
};

// Helper to read token safely on client
const getToken = () => {
  if (typeof window === 'undefined') return null;
  try { return localStorage.getItem('eatnow_token'); } catch { return null; }
};

export default function DriverCurrentPage() {
    const [orders, setOrders] = useState<UiOrder[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string>("");

    async function load() {
        try {
            setLoading(true);
            console.log('Loading driver orders...');
            
            // Load all orders for this driver (backend already filters by driverId)
            const res: any = await driverService.getMyOrders({ 
                status: undefined, // Get all orders for this driver
                page: 1, 
                limit: 100 
            });
            console.log('Driver orders response:', res);
            const allOrders: any[] = Array.isArray(res) ? res : res?.orders || [];
            
            // Filter to only show incomplete orders (not delivered or cancelled)
            const incompleteOrders = allOrders.filter((order: any) => {
                const status = order.status?.toLowerCase();
                return status !== 'delivered' && status !== 'cancelled';
            });
            
            console.log('All driver orders:', allOrders.length);
            console.log('Incomplete orders:', incompleteOrders.length);
            console.log('Orders list:', incompleteOrders);
            setOrders(incompleteOrders.map((o: any) => ({
                id: o._id || o.id,
                code: o.orderNumber || o.code || o.id,
                pickup: o.restaurantId?.name || o.restaurantName || "",
                dropoff: o.customerId?.name || o.customerName || o.deliveryAddress?.recipientName || "",
                cod: typeof o.cod === 'number' ? o.cod : (o.paymentMethod === 'COD' ? (o.finalTotal || o.totalAmount || 0) : 0),
                status: o.status || "picking_up",
                totalAmount: o.totalAmount || o.total || 0,
                deliveryFee: o.deliveryFee || 0,
                subtotal: o.subtotal || o.itemsTotal || 0,
                tax: o.tax || 0,
                discount: o.discount || 0,
                createdAt: o.createdAt,
                restaurantAddress: o.restaurantId?.address || o.restaurantAddress || "",
                customerAddress: o.deliveryAddress?.addressLine || o.customerAddress || "",
                customerPhone: o.customerId?.phone || o.deliveryAddress?.recipientPhone || o.customerPhone || "",
                restaurantPhone: o.restaurantId?.phone || o.restaurantPhone || "",
                items: o.items || [],
                orderNote: o.orderNote || o.note || "",
                deliveryNote: o.deliveryNote || o.deliveryAddress?.note || "",
                paymentMethod: o.paymentMethod || "COD",
            })));
        } catch (e: any) {
            console.error('Error loading driver orders:', e);
            setError(e?.message || "Kh√¥ng t·∫£i ƒë∆∞·ª£c danh s√°ch ƒë∆°n");
        } finally {
            setLoading(false);
        }
    }

    useEffect(() => { load(); }, []);

    async function accept(id: string) {
        await driverService.acceptOrder(id);
        await load();
    }
    async function reject(id: string) {
        await driverService.rejectOrder(id, 'T·ª´ ch·ªëi ƒë∆°n h√†ng');
        await load();
    }
    
    // 4 tr·∫°ng th√°i ch√≠nh cho t√†i x·∫ø
    async function arrivedAtRestaurant(id: string) {
        try {
            await driverService.updateOrderStatus(id, { status: 'arrived_at_restaurant' });
            await load();
        } catch (error) {
            console.error('Error updating status to arrived_at_restaurant:', error);
        }
    }
    
    async function pickedUpOrder(id: string) {
        try {
            await driverService.updateOrderStatus(id, { status: 'picked_up' });
            await load();
        } catch (error) {
            console.error('Error updating status to picked_up:', error);
        }
    }
    
    async function arrivedAtCustomer(id: string) {
        try {
            await driverService.updateOrderStatus(id, { status: 'arrived_at_customer' });
            await load();
        } catch (error) {
            console.error('Error updating status to arrived_at_customer:', error);
        }
    }
    
    async function completeOrder(id: string) {
        try {
            await driverService.updateOrderStatus(id, { status: 'delivered' });
            await load();
        } catch (error) {
            console.error('Error completing order:', error);
        }
    }
    
    async function cancelOrder(id: string) {
        try {
            if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy ƒë∆°n h√†ng n√†y? ƒê∆°n h√†ng s·∫Ω ƒë∆∞·ª£c g√°n l·∫°i cho t√†i x·∫ø kh√°c.')) {
                await driverService.updateOrderStatus(id, { 
                    status: 'cancelled',
                    driverId: null, // Reset driverId ƒë·ªÉ t√¨m t√†i x·∫ø kh√°c
                    cancellationReason: 'T√†i x·∫ø h·ªßy ƒë∆°n h√†ng'
                });
                await load();
            }
        } catch (error) {
            console.error('Error cancelling order:', error);
        }
    }

    const empty = useMemo(() => !loading && orders.length === 0, [loading, orders.length]);

    return (
        <main className="min-h-screen bg-gray-50">
            <div className="container mx-auto px-4 py-8">
                <div className="flex items-center justify-between mb-6">
                    <div>
                        <h1 className="text-3xl font-bold text-gray-900">ƒê∆°n h√†ng c·ªßa t√¥i</h1>
                        <p className="mt-1 text-gray-600">T·∫•t c·∫£ ƒë∆°n h√†ng ch∆∞a ho√†n th√†nh ƒë∆∞·ª£c g√°n cho b·∫°n</p>
                    </div>
                    <div className="flex items-center space-x-4">
                        <div className="text-right">
                            <div className="text-sm text-gray-500">
                                Ch∆∞a ho√†n th√†nh: <span className="font-semibold text-orange-600">{orders.length}</span> ƒë∆°n h√†ng
                            </div>
                            {orders.length > 0 && (
                                <div className="text-xs text-gray-400 mt-1">
                                    Bao g·ªìm t·∫•t c·∫£ tr·∫°ng th√°i ch∆∞a giao xong
                                </div>
                            )}
                        </div>
                        <a
                            href="/driver/history"
                            className="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors font-medium"
                        >
                            üìã L·ªãch s·ª≠
                        </a>
                    </div>
                </div>

                {error && (
                    <div className="mb-6 rounded-md bg-red-50 px-4 py-3 text-sm text-red-700">
                        {error}
                    </div>
                )}

                {loading && (
                    <div className="flex items-center justify-center py-12">
                        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-orange-600"></div>
                        <span className="ml-3 text-gray-600">ƒêang t·∫£i ƒë∆°n h√†ng...</span>
                    </div>
                )}

                {empty && (
                    <div className="text-center py-12">
                        <div className="text-6xl mb-4">üì¶</div>
                        <h3 className="text-lg font-medium text-gray-900 mb-2">Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o</h3>
                        <p className="text-gray-600 mb-4">B·∫°n hi·ªán t·∫°i kh√¥ng c√≥ ƒë∆°n h√†ng n√†o ƒë∆∞·ª£c g√°n</p>
                        <div className="space-y-2 text-sm text-gray-500 mb-6">
                            <p>‚Ä¢ Truy c·∫≠p b·∫£n ƒë·ªì ƒë·ªÉ t√¨m v√† nh·∫≠n ƒë∆°n h√†ng m·ªõi</p>
                            <p>‚Ä¢ Ch·ªâ hi·ªÉn th·ªã ƒë∆°n h√†ng ch∆∞a ho√†n th√†nh (ch∆∞a giao xong)</p>
                            <p>‚Ä¢ ƒê∆°n h√†ng ƒë√£ giao xong s·∫Ω kh√¥ng hi·ªÉn th·ªã ·ªü ƒë√¢y</p>
                        </div>
                        <a 
                            href="/driver/dashboard" 
                            className="inline-flex items-center px-6 py-3 bg-orange-600 text-white rounded-lg hover:bg-orange-700 font-medium"
                        >
                            üó∫Ô∏è Xem b·∫£n ƒë·ªì t√¨m ƒë∆°n h√†ng
                        </a>
                    </div>
                )}

                {!loading && orders.length > 0 && (
                    <div className="space-y-4">
                        {orders.map((order, index) => {
                            const statusInfo = statusConfig[order.status as keyof typeof statusConfig] || statusConfig.picking_up;
                            return (
                                <div key={order.id} className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
                                    {/* Header */}
                                    <div className="px-6 py-4 border-b border-gray-100">
                                        <div className="flex items-center justify-between">
                                            <div className="flex items-center space-x-3">
                                                <div className="text-2xl">{statusInfo.icon}</div>
                                    <div>
                                                    <div className="flex items-center space-x-2">
                                                        <h3 className="text-lg font-semibold text-gray-900">
                                                            ƒê∆°n h√†ng #{order.code}
                                                        </h3>
                                                        {orders.length > 1 && (
                                                            <span className="px-2 py-1 bg-orange-100 text-orange-700 text-xs font-medium rounded-full">
                                                                #{index + 1}
                                                            </span>
                                                        )}
                                                    </div>
                                                    <div className="flex items-center space-x-2 mt-1">
                                                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${statusInfo.color}`}>
                                                            {statusInfo.label}
                                                        </span>
                                                        {order.createdAt && (
                                                            <span className="text-xs text-gray-500">
                                                                {new Date(order.createdAt).toLocaleString('vi-VN')}
                                                            </span>
                                                        )}
                                                    </div>
                                                </div>
                                            </div>
                                            <div className="text-right">
                                                <div className="text-lg font-bold text-gray-900">
                                                    ‚Ç´{order.totalAmount?.toLocaleString() || '0'}
                                                </div>
                                                {order.deliveryFee > 0 && (
                                                    <div className="text-sm text-gray-500">
                                                        Ph√≠ ship: ‚Ç´{order.deliveryFee.toLocaleString()}
                                                    </div>
                                                )}
                                            </div>
                                        </div>
                                    </div>

                                    {/* Content */}
                                    <div className="px-6 py-4">
                                        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                                            {/* Restaurant Info */}
                                            <div className="space-y-4">
                                                <div className="flex items-start space-x-3">
                                                    <div className="text-orange-600 text-lg">üè™</div>
                                                    <div className="flex-1">
                                                        <h4 className="font-medium text-gray-900">Nh√† h√†ng</h4>
                                                        <p className="text-gray-700 font-medium">{order.pickup}</p>
                                                        {order.restaurantAddress && (
                                                            <p className="text-sm text-gray-500 mt-1">
                                                                üìç {order.restaurantAddress}
                                                            </p>
                                                        )}
                                                        {order.restaurantPhone && (
                                                            <p className="text-sm text-gray-500 mt-1">
                                                                üìû {order.restaurantPhone}
                                                            </p>
                                                        )}
                                                    </div>
                                                </div>

                                                {/* Customer Info */}
                                                <div className="flex items-start space-x-3">
                                                    <div className="text-blue-600 text-lg">üë§</div>
                                                    <div className="flex-1">
                                                        <h4 className="font-medium text-gray-900">Kh√°ch h√†ng</h4>
                                                        <p className="text-gray-700 font-medium">{order.dropoff}</p>
                                                        {order.customerPhone && (
                                                            <p className="text-sm text-gray-500 mt-1">
                                                                üìû {order.customerPhone}
                                                            </p>
                                                        )}
                                                        {order.customerAddress && (
                                                            <p className="text-sm text-gray-500 mt-1">
                                                                üìç {order.customerAddress}
                                                            </p>
                                                        )}
                                                    </div>
                                                </div>
                                            </div>

                                            {/* Payment Info */}
                                            <div className="space-y-4">
                                                <div className="bg-gray-50 rounded-lg p-4">
                                                    <h4 className="font-medium text-gray-900 mb-3">Th√¥ng tin thanh to√°n</h4>
                                                    <div className="space-y-2 text-sm">
                                                        <div className="flex justify-between">
                                                            <span className="text-gray-600">T·∫°m t√≠nh:</span>
                                                            <span className="font-medium">‚Ç´{order.subtotal?.toLocaleString() || '0'}</span>
                                                        </div>
                                                        {order.discount > 0 && (
                                                            <div className="flex justify-between text-green-600">
                                                                <span>Gi·∫£m gi√°:</span>
                                                                <span>-‚Ç´{order.discount.toLocaleString()}</span>
                                                            </div>
                                                        )}
                                                        <div className="flex justify-between">
                                                            <span className="text-gray-600">Ph√≠ ship:</span>
                                                            <span className="font-medium">‚Ç´{order.deliveryFee?.toLocaleString() || '0'}</span>
                                                        </div>
                                                        {order.tax > 0 && (
                                                            <div className="flex justify-between">
                                                                <span className="text-gray-600">Thu·∫ø:</span>
                                                                <span className="font-medium">‚Ç´{order.tax.toLocaleString()}</span>
                                                            </div>
                                                        )}
                                                        <div className="border-t pt-2 flex justify-between font-semibold text-lg">
                                                            <span>T·ªïng c·ªông:</span>
                                                            <span className="text-orange-600">‚Ç´{order.totalAmount?.toLocaleString() || '0'}</span>
                                                        </div>
                                                        {order.cod > 0 && (
                                                            <div className="bg-yellow-100 rounded p-2 mt-2">
                                                                <div className="flex items-center space-x-2">
                                                                    <span className="text-yellow-600">üí∞</span>
                                                                    <span className="text-sm font-medium text-yellow-800">
                                                                        Thu h·ªô: ‚Ç´{order.cod.toLocaleString()}
                                                                    </span>
                                                                </div>
                                                            </div>
                                                        )}
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        {/* Items */}
                                        {order.items && order.items.length > 0 && (
                                            <div className="mt-6 pt-4 border-t border-gray-100">
                                                <h4 className="font-medium text-gray-900 mb-3">Chi ti·∫øt m√≥n ƒÉn</h4>
                                                <div className="space-y-2">
                                                    {order.items.map((item: any, index: number) => (
                                                        <div key={index} className="flex justify-between items-center p-2 bg-gray-50 rounded">
                                                            <div className="flex-1">
                                                                <span className="text-gray-700 font-medium">
                                                                    {item.quantity}x {item.name}
                                                                </span>
                                                                {item.note && (
                                                                    <p className="text-xs text-gray-500 mt-1">
                                                                        Ghi ch√∫: {item.note}
                                                                    </p>
                                                                )}
                                                            </div>
                                                            <span className="text-gray-900 font-semibold">
                                                                ‚Ç´{item.subtotal?.toLocaleString() || '0'}
                                                            </span>
                                                        </div>
                                                    ))}
                                                </div>
                                            </div>
                                        )}

                                        {/* Notes */}
                                        {(order.orderNote || order.deliveryNote) && (
                                            <div className="mt-6 pt-4 border-t border-gray-100">
                                                <h4 className="font-medium text-gray-900 mb-3">Ghi ch√∫</h4>
                                                <div className="space-y-2">
                                                    {order.orderNote && (
                                                        <div className="bg-blue-50 rounded-lg p-3">
                                                            <div className="flex items-start space-x-2">
                                                                <span className="text-blue-600">üìù</span>
                                                                <div>
                                                                    <p className="text-sm font-medium text-blue-800">Ghi ch√∫ ƒë∆°n h√†ng:</p>
                                                                    <p className="text-sm text-blue-700 mt-1">{order.orderNote}</p>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    )}
                                                    {order.deliveryNote && (
                                                        <div className="bg-green-50 rounded-lg p-3">
                                                            <div className="flex items-start space-x-2">
                                                                <span className="text-green-600">üöö</span>
                                                                <div>
                                                                    <p className="text-sm font-medium text-green-800">Ghi ch√∫ giao h√†ng:</p>
                                                                    <p className="text-sm text-green-700 mt-1">{order.deliveryNote}</p>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    )}
                                                </div>
                                            </div>
                                        )}
                                    </div>

                                    {/* Actions */}
                                    <div className="px-6 py-4 bg-gray-50 border-t border-gray-100">
                                        <div className="space-y-3">
                                            {/* Status Progress */}
                                            <div className="flex items-center justify-between text-sm">
                                                <span className="text-gray-600">Tr·∫°ng th√°i hi·ªán t·∫°i:</span>
                                                <span className={`px-2 py-1 rounded-full text-xs font-medium ${statusConfig[order.status as keyof typeof statusConfig]?.color || 'bg-gray-100 text-gray-800'}`}>
                                                    {statusConfig[order.status as keyof typeof statusConfig]?.label || order.status}
                                                </span>
                                            </div>

                                            {/* Action Buttons - Ch·ªâ hi·ªán 1 n√∫t tr·∫°ng th√°i theo tr√¨nh t·ª± */}
                                            <div className="space-y-3">
                                                {/* N√∫t tr·∫°ng th√°i ch√≠nh - ch·ªâ hi·ªán 1 n√∫t theo tr√¨nh t·ª± */}
                                                <div className="flex justify-center">
                                                    {/* ƒê√£ ƒë·∫øn qu√°n */}
                                                    {order.status === "picking_up" && (
                                                        <button 
                                                            onClick={() => arrivedAtRestaurant(order.id)} 
                                                            className="px-8 py-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium transition-colors text-lg"
                                                        >
                                                            üè™ ƒê√£ ƒë·∫øn qu√°n
                                                        </button>
                                                    )}
                                                    
                                                    {/* ƒê√£ l·∫•y ƒë∆°n */}
                                                    {order.status === "arrived_at_restaurant" && (
                                                        <button 
                                                            onClick={() => pickedUpOrder(order.id)} 
                                                            className="px-8 py-4 bg-purple-600 text-white rounded-lg hover:bg-purple-700 font-medium transition-colors text-lg"
                                                        >
                                                            üì¶ ƒê√£ l·∫•y ƒë∆°n
                                                        </button>
                                                    )}
                                                    
                                                    {/* ƒê√£ ƒë·∫øn v·ªã tr√≠ giao */}
                                                    {order.status === "picked_up" && (
                                                        <button 
                                                            onClick={() => arrivedAtCustomer(order.id)} 
                                                            className="px-8 py-4 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 font-medium transition-colors text-lg"
                                                        >
                                                            üè† ƒê√£ ƒë·∫øn v·ªã tr√≠ giao
                                                        </button>
                                                    )}
                                                    
                                                    {/* ƒê√£ ho√†n th√†nh */}
                                                    {order.status === "arrived_at_customer" && (
                                                        <button 
                                                            onClick={() => completeOrder(order.id)} 
                                                            className="px-8 py-4 bg-green-600 text-white rounded-lg hover:bg-green-700 font-medium transition-colors text-lg"
                                                        >
                                                            ‚úÖ ƒê√£ ho√†n th√†nh
                                                        </button>
                                                    )}
                                                </div>

                                                {/* N√∫t ph·ª• - nh·ªè v√† ·ªü d∆∞·ªõi */}
                                                <div className="flex gap-2 justify-center">
                                                    {/* N√∫t h·ªßy ƒë∆°n - nh·ªè */}
                                                    {order.status !== "delivered" && order.status !== "cancelled" && (
                                                        <button 
                                                            onClick={() => cancelOrder(order.id)} 
                                                            className="px-3 py-1 bg-red-100 text-red-700 rounded text-sm hover:bg-red-200 transition-colors"
                                                        >
                                                            ‚ùå H·ªßy
                                                        </button>
                                                    )}

                                                    {/* N√∫t g·ªçi - hi·ªán dropdown v·ªõi 2 s·ªë */}
                                                    {(order.restaurantPhone || order.customerPhone) && (
                                                        <div className="relative">
                                                            <button 
                                                                onClick={() => {
                                                                    const numbers = [];
                                                                    if (order.restaurantPhone) numbers.push({ label: 'Nh√† h√†ng', phone: order.restaurantPhone });
                                                                    if (order.customerPhone) numbers.push({ label: 'Kh√°ch h√†ng', phone: order.customerPhone });
                                                                    
                                                                    if (numbers.length === 1) {
                                                                        window.open(`tel:${numbers[0].phone}`);
                                                                    } else {
                                                                        // Hi·ªán dropdown v·ªõi 2 s·ªë
                                                                        const choice = confirm(`Ch·ªçn s·ªë ƒë·ªÉ g·ªçi:\n1. Nh√† h√†ng: ${order.restaurantPhone}\n2. Kh√°ch h√†ng: ${order.customerPhone}\n\nOK = Nh√† h√†ng, Cancel = Kh√°ch h√†ng`);
                                                                        const phone = choice ? order.restaurantPhone : order.customerPhone;
                                                                        if (phone) window.open(`tel:${phone}`);
                                                                    }
                                                                }}
                                                                className="px-3 py-1 bg-green-100 text-green-700 rounded text-sm hover:bg-green-200 transition-colors"
                                                            >
                                                                üìû G·ªçi
                                                            </button>
                                                        </div>
                                                    )}

                                                    {/* N√∫t nh·∫Øn tin - nh·ªè */}
                                                    <button 
                                                        onClick={() => {
                                                            // Toggle chat visibility
                                                            const chatElement = document.getElementById(`chat-${order.id}`);
                                                            if (chatElement) {
                                                                chatElement.style.display = chatElement.style.display === 'none' ? 'block' : 'none';
                                                            }
                                                        }}
                                                        className="px-3 py-1 bg-blue-100 text-blue-700 rounded text-sm hover:bg-blue-200 transition-colors"
                                                    >
                                                        üí¨ Chat
                                                    </button>
                                                </div>
                                            </div>

                                            {/* Order Summary */}
                                            <div className="text-xs text-gray-500 pt-2 border-t border-gray-200">
                                                <div className="flex justify-between">
                                                    <span>M√£ ƒë∆°n: #{order.code}</span>
                                                    <span>Ph∆∞∆°ng th·ª©c: {order.paymentMethod === 'COD' ? 'Thu h·ªô' : 'Chuy·ªÉn kho·∫£n'}</span>
                                                </div>
                                                {order.createdAt && (
                                                    <div className="mt-1">
                                                        <span>Th·ªùi gian ƒë·∫∑t: {new Date(order.createdAt).toLocaleString('vi-VN')}</span>
                                                    </div>
                                                )}
                                            </div>
                                        </div>
                                        {/* Chat with Customer - Toggle visibility */}
                                        {typeof window !== 'undefined' && order.id && (
                                          <div id={`chat-${order.id}`} className="mt-4" style={{ display: 'none' }}>
                                            <OrderChat orderId={order.id} token={getToken() || ''} role={'driver'} />
                                          </div>
                                        )}
                                    </div>
                                </div>
                            );
                        })}
                    </div>
                )}
            </div>
        </main>
    );
}
