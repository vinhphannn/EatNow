'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useToast } from '../../../components';
import QRCode from 'qrcode';
import { 
  Card, 
  CardContent, 
  Typography, 
  Button, 
  Stack, 
  Box, 
  List, 
  ListItem, 
  ListItemText, 
  ListItemIcon,
  Divider,
  Chip,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Alert
} from '@mui/material';
import { 
  WalletIcon, 
  ArrowUpTrayIcon,
  BanknotesIcon,
  CreditCardIcon,
  ChartBarIcon
} from '@heroicons/react/24/outline';

interface WalletTransaction {
  _id: string;
  type: 'commission' | 'withdraw' | 'refund' | 'fee';
  amount: number;
  description: string;
  status: 'pending' | 'completed' | 'failed' | 'escrowed';
  createdAt: string;
  orderId?: string;
  orderCode?: string;
}

interface DriverWalletBalance {
  balance: number;
  pendingBalance: number;
  escrowBalance: number;
  totalDeposits: number;
  totalWithdrawals: number;
}

export default function DriverWalletPage() {
  const router = useRouter();
  const api = process.env.NEXT_PUBLIC_API_URL || "http://localhost:3001";
  const { showToast } = useToast();

  const [balance, setBalance] = useState<DriverWalletBalance>({
    balance: 0,
    pendingBalance: 0,
    escrowBalance: 0,
    totalDeposits: 0,
    totalWithdrawals: 0
  });
  const [transactions, setTransactions] = useState<WalletTransaction[]>([]);
  const [loading, setLoading] = useState(true);
  const [hasWallet, setHasWallet] = useState<boolean | null>(null);
  const [creatingWallet, setCreatingWallet] = useState(false);
  const [withdrawDialogOpen, setWithdrawDialogOpen] = useState(false);
  const [withdrawAmount, setWithdrawAmount] = useState('');
  const [withdrawPhone, setWithdrawPhone] = useState('');
  const [processing, setProcessing] = useState(false);
  
  // Deposit states
  const [depositAmount, setDepositAmount] = useState('');
  const [customDepositAmount, setCustomDepositAmount] = useState('');
  const [showDepositModal, setShowDepositModal] = useState(false);
  const [qrCode, setQrCode] = useState<string>('');
  const [showQRCode, setShowQRCode] = useState(false);
  const [depositStep, setDepositStep] = useState<'amount' | 'qr'>('amount');
  const [currentTransactionId, setCurrentTransactionId] = useState<string>('');
  const [isPolling, setIsPolling] = useState(false);
  const [pollingInterval, setPollingInterval] = useState<NodeJS.Timeout | null>(null);

  useEffect(() => {
    loadWalletData();
  }, []);

  // S·ªë ti·ªÅn c√≥ s·∫µn ƒë·ªÉ ch·ªçn
  const presetAmounts = [50000, 100000, 200000, 500000, 1000000];

  const handlePresetAmount = (amount: number) => {
    setDepositAmount((amount / 1000).toString());
    setCustomDepositAmount('');
  };

  const handleCustomAmount = (value: string) => {
    setCustomDepositAmount(value);
    setDepositAmount(value);
  };

  // Polling function to check transaction status
  const startPollingTransaction = (transactionId: string) => {
    console.log(`üîÑ Starting polling for transaction: ${transactionId}`);
    
    let pollCount = 0;
    const maxPolls = 20; // Maximum 20 polls (1 minute)
    
    const interval = setInterval(async () => {
      try {
        pollCount++;
        console.log(`üîç Polling transaction (${pollCount}/${maxPolls}): ${transactionId}`);
        
        const response = await fetch(`${api}/api/v1/drivers/mine/wallet/transaction/${transactionId}`, {
          credentials: 'include'
        });
        
        if (response.ok) {
          const result = await response.json();
          const tx = result.transaction;
          console.log(`üìä Transaction status: ${tx.status}`);
          
          if (tx.status === 'completed') {
            console.log('‚úÖ Transaction completed!');
            clearInterval(interval);
            setPollingInterval(null);
            setIsPolling(false);
            showToast('N·∫°p ti·ªÅn th√†nh c√¥ng! S·ªë d∆∞ ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.', 'success');
            resetDepositModal();
            loadWalletData(); // Reload balance
            return;
          } else if (tx.status === 'failed' || tx.status === 'cancelled') {
            console.log('‚ùå Transaction failed/cancelled');
            clearInterval(interval);
            setPollingInterval(null);
            setIsPolling(false);
            showToast('Giao d·ªãch th·∫•t b·∫°i ho·∫∑c b·ªã h·ªßy.', 'error');
            resetDepositModal();
            return;
          }
        }
        
        // Stop polling after max attempts
        if (pollCount >= maxPolls) {
          console.log('‚è∞ Polling timeout - maximum attempts reached');
          clearInterval(interval);
          setPollingInterval(null);
          setIsPolling(false);
          showToast('Giao d·ªãch ƒëang ch·ªù x·ª≠ l√Ω. B·∫°n c√≥ th·ªÉ ki·ªÉm tra l·∫°i sau.', 'info');
        }
      } catch (error) {
        console.error('Error polling transaction:', error);
        pollCount++; // Count errors too
      }
    }, 3000); // Poll every 3 seconds
    
    setPollingInterval(interval);
    setIsPolling(true);
  };

  const handleDeposit = async () => {
    const amount = parseFloat(depositAmount) * 1000;
    
    if (!depositAmount || amount < 10000) {
      showToast('S·ªë ti·ªÅn n·∫°p t·ªëi thi·ªÉu l√† 10,000 VND', 'error');
      return;
    }

    try {
      setProcessing(true);
      const response = await fetch(`${api}/api/v1/drivers/mine/wallet/deposit`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({ amount, provider: 'momo' })
      });
      
      const result = await response.json();
      console.log('Deposit response:', result);
      
      if (result.success && result.transaction) {
        const transaction = result.transaction;
        
        // L∆∞u transaction ID ƒë·ªÉ confirm sau
        setCurrentTransactionId(transaction._id);
        
        // T·∫°o QR code t·ª´ payment URL n·∫øu c√≥
        if (transaction.paymentUrl) {
          const qrCodeDataURL = await QRCode.toDataURL(transaction.paymentUrl, {
            width: 300,
            margin: 2,
            color: {
              dark: '#000000',
              light: '#FFFFFF'
            }
          });
          
          setQrCode(qrCodeDataURL);
          setDepositStep('qr');
          setShowQRCode(true);
          
          // Start polling for transaction status
          startPollingTransaction(transaction._id);
        } else {
          showToast('T·∫°o giao d·ªãch th√†nh c√¥ng!', 'success');
          resetDepositModal();
          loadWalletData();
        }
      } else {
        showToast('T·∫°o giao d·ªãch th·∫•t b·∫°i: ' + (result.message || 'Unknown error'), 'error');
      }
    } catch (error: any) {
      console.error('Error depositing:', error);
      showToast('L·ªói n·∫°p ti·ªÅn: ' + error.message, 'error');
    } finally {
      setProcessing(false);
    }
  };

  const resetDepositModal = () => {
    setShowDepositModal(false);
    setDepositAmount('');
    setCustomDepositAmount('');
    setQrCode('');
    setShowQRCode(false);
    setDepositStep('amount');
    setCurrentTransactionId('');
  };

  const loadWalletData = async () => {
    try {
      setLoading(true);
      
      // Load driver wallet balance
      const balanceResponse = await fetch(`${api}/api/v1/drivers/mine/wallet/balance`, {
        credentials: 'include'
      });
      
      if (balanceResponse.ok) {
        const balanceData = await balanceResponse.json();
        setBalance(balanceData);
        
        // Check if wallet exists
        const walletExists = balanceData !== null && balanceData.isActive !== false;
        setHasWallet(walletExists);
      }

      // Load transactions
      const transactionsResponse = await fetch(`${api}/api/v1/drivers/mine/wallet/transactions`, {
        credentials: 'include'
      });
      
      if (transactionsResponse.ok) {
        const transactionsData = await transactionsResponse.json();
        setTransactions(Array.isArray(transactionsData) ? transactionsData : []);
      }
    } catch (error) {
      console.error('Error loading wallet data:', error);
      setHasWallet(false);
    } finally {
      setLoading(false);
    }
  };

  const handleCreateWallet = async () => {
    try {
      setCreatingWallet(true);
      
      // Call API to create wallet (backend will auto-create if not exists)
      const response = await fetch(`${api}/api/v1/drivers/mine/wallet/balance`, {
        method: 'GET',
        credentials: 'include'
      });
      
      if (response.ok) {
        showToast('V√≠ ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!', 'success');
        await loadWalletData();
      } else {
        throw new Error('Failed to create wallet');
      }
    } catch (error: any) {
      console.error('Error creating wallet:', error);
      showToast('Kh√¥ng th·ªÉ t·∫°o v√≠: ' + error.message, 'error');
    } finally {
      setCreatingWallet(false);
    }
  };

  const handleWithdraw = async () => {
    if (!withdrawAmount || !withdrawPhone) {
      showToast('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin', 'error');
      return;
    }

    const amount = parseInt(withdrawAmount) * 1000; // Convert to VND
    if (amount < 50000) {
      showToast('S·ªë ti·ªÅn r√∫t t·ªëi thi·ªÉu l√† 50,000 VND', 'error');
      return;
    }

    if (amount > balance.balance) {
      showToast('S·ªë d∆∞ kh√¥ng ƒë·ªß', 'error');
      return;
    }

    try {
      setProcessing(true);
      
      const response = await fetch(`${api}/api/v1/drivers/mine/wallet/withdraw`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({
          amount,
          phone: withdrawPhone,
          description: `R√∫t ti·ªÅn v·ªÅ s·ªë ${withdrawPhone}`
        })
      });

      if (response.ok) {
        showToast('Y√™u c·∫ßu r√∫t ti·ªÅn ƒë√£ ƒë∆∞·ª£c g·ª≠i!', 'success');
        setWithdrawDialogOpen(false);
        setWithdrawAmount('');
        setWithdrawPhone('');
        await loadWalletData();
      } else {
        const error = await response.json();
        throw new Error(error.message || 'R√∫t ti·ªÅn th·∫•t b·∫°i');
      }
    } catch (error: any) {
      console.error('Error withdrawing:', error);
      showToast('R√∫t ti·ªÅn th·∫•t b·∫°i: ' + error.message, 'error');
    } finally {
      setProcessing(false);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'success';
      case 'pending': return 'warning';
      case 'failed': return 'error';
      case 'escrowed': return 'info';
      default: return 'default';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'completed': return 'Ho√†n th√†nh';
      case 'pending': return 'ƒêang x·ª≠ l√Ω';
      case 'failed': return 'Th·∫•t b·∫°i';
      case 'escrowed': return 'ƒêang gi·ªØ';
      default: return 'Kh√¥ng x√°c ƒë·ªãnh';
    }
  };

  const getTypeText = (type: string) => {
    switch (type) {
      case 'commission': return 'Nh·∫≠n ti·ªÅn t·ª´ ƒë∆°n h√†ng';
      case 'withdraw': return 'R√∫t ti·ªÅn';
      case 'refund': return 'Ho√†n ti·ªÅn';
      case 'fee': return 'Ph√≠ d·ªãch v·ª•';
      default: return type;
    }
  };

  if (loading) {
    return (
      <Stack alignItems="center" justifyContent="center" sx={{ py: 6 }}>
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-orange-500 mx-auto"></div>
        <Typography variant="body2" color="text.secondary" sx={{ mt: 2 }}>ƒêang t·∫£i d·ªØ li·ªáu v√≠...</Typography>
      </Stack>
    );
  }

  // Show create wallet UI if no wallet exists
  if (hasWallet === false) {
    return (
      <div>
        <Typography variant="h4" component="h1" sx={{ mb: 3 }}>V√≠ t√†i x·∫ø</Typography>
        
        <Card sx={{ mb: 3 }}>
          <CardContent>
            <Stack alignItems="center" spacing={3} sx={{ py: 6 }}>
              <WalletIcon width={64} className="text-gray-400" />
              <Typography variant="h6" color="text.secondary" textAlign="center">
                B·∫°n ch∆∞a c√≥ v√≠
              </Typography>
              <Typography variant="body2" color="text.secondary" textAlign="center">
                T·∫°o v√≠ ngay ƒë·ªÉ nh·∫≠n ti·ªÅn t·ª´ c√°c ƒë∆°n h√†ng ƒë√£ giao
              </Typography>
              <Button
                variant="contained"
                size="large"
                onClick={handleCreateWallet}
                disabled={creatingWallet}
                startIcon={<WalletIcon width={20} />}
                sx={{ mt: 2 }}
              >
                {creatingWallet ? 'ƒêang t·∫°o...' : 'T·∫°o v√≠'}
              </Button>
            </Stack>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div>
      <Typography variant="h4" component="h1" sx={{ mb: 3 }}>V√≠ t√†i x·∫ø</Typography>

      {/* Balance Card */}
      <Card sx={{ mb: 3, background: 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)' }}>
        <CardContent>
          <Stack direction="row" alignItems="center" spacing={2} sx={{ mb: 2 }}>
            <BanknotesIcon width={32} className="text-white" />
            <Typography variant="h5" fontWeight={600} color="white">S·ªë d∆∞ kh·∫£ d·ª•ng</Typography>
          </Stack>
          
          <Typography variant="h3" color="white" fontWeight={700} sx={{ mb: 1 }}>
            {balance.balance.toLocaleString('vi-VN')}ƒë
          </Typography>
          
          {balance.pendingBalance > 0 && (
            <Alert severity="warning" sx={{ mb: 2 }}>
              S·ªë d∆∞ ƒëang ch·ªù: {balance.pendingBalance.toLocaleString('vi-VN')}ƒë
            </Alert>
          )}
          
          <Stack direction="row" spacing={2}>
            <Box sx={{ flex: 1 }}>
              <Typography variant="body2" color="rgba(255,255,255,0.9)">T·ªïng thu</Typography>
              <Typography variant="h6" color="white">
                +{balance.totalDeposits.toLocaleString('vi-VN')}ƒë
              </Typography>
            </Box>
            <Box sx={{ flex: 1 }}>
              <Typography variant="body2" color="rgba(255,255,255,0.9)">T·ªïng chi</Typography>
              <Typography variant="h6" color="white">
                -{balance.totalWithdrawals.toLocaleString('vi-VN')}ƒë
              </Typography>
            </Box>
          </Stack>
        </CardContent>
      </Card>

      {/* Action Buttons */}
      <Stack direction="row" spacing={2} sx={{ mb: 3 }}>
        <Button
          variant="contained"
          color="success"
          startIcon={<CreditCardIcon width={20} />}
          onClick={() => setShowDepositModal(true)}
          sx={{ minWidth: 150 }}
        >
          N·∫°p ti·ªÅn
        </Button>
        <Button
          variant="contained"
          startIcon={<ArrowUpTrayIcon width={20} />}
          onClick={() => setWithdrawDialogOpen(true)}
          disabled={balance.balance < 50000}
          sx={{ minWidth: 150 }}
        >
          R√∫t ti·ªÅn
        </Button>
        <Button
          variant="outlined"
          startIcon={<ChartBarIcon width={20} />}
          onClick={loadWalletData}
          sx={{ minWidth: 150 }}
        >
          L√†m m·ªõi
        </Button>
      </Stack>

      {/* Transactions */}
      <Card>
        <CardContent>
          <Typography variant="h6" sx={{ mb: 2 }}>L·ªãch s·ª≠ giao d·ªãch</Typography>
          
          {transactions.length === 0 ? (
            <Box sx={{ textAlign: 'center', py: 4 }}>
              <CreditCardIcon width={48} className="text-gray-400 mx-auto mb-2" />
              <Typography variant="body2" color="text.secondary">
                Ch∆∞a c√≥ giao d·ªãch n√†o
              </Typography>
            </Box>
          ) : (
            <List>
              {transactions.map((transaction, index) => (
                <div key={transaction._id}>
                  <ListItem>
                    <ListItemIcon>
                      <CreditCardIcon width={24} className="text-gray-600" />
                    </ListItemIcon>
                    <ListItemText
                      primary={
                        <Stack direction="row" justifyContent="space-between" alignItems="center">
                          <Typography variant="body1" fontWeight={500}>
                            {getTypeText(transaction.type)}
                          </Typography>
                          <Typography 
                            variant="body1" 
                            fontWeight={600}
                            color={transaction.amount > 0 ? 'success.main' : 'error.main'}
                          >
                            {transaction.amount > 0 ? '+' : ''}{transaction.amount.toLocaleString('vi-VN')}ƒë
                          </Typography>
                        </Stack>
                      }
                      secondary={
                        <Stack spacing={1}>
                          <Typography variant="body2" color="text.secondary">
                            {transaction.description}
                          </Typography>
                          <Stack direction="row" spacing={2} alignItems="center">
                            <Chip 
                              label={getStatusText(transaction.status)} 
                              size="small" 
                              color={getStatusColor(transaction.status) as any}
                            />
                            <Typography variant="caption" color="text.secondary">
                              {new Date(transaction.createdAt).toLocaleString('vi-VN')}
                            </Typography>
                            {transaction.orderCode && (
                              <Typography variant="caption" color="primary">
                                #{transaction.orderCode}
                              </Typography>
                            )}
                          </Stack>
                        </Stack>
                      }
                    />
                  </ListItem>
                  {index < transactions.length - 1 && <Divider />}
                </div>
              ))}
            </List>
          )}
        </CardContent>
      </Card>

      {/* Deposit Modal */}
      <Dialog open={showDepositModal} onClose={resetDepositModal} maxWidth="md" fullWidth>
        <DialogTitle>N·∫°p ti·ªÅn v√†o v√≠</DialogTitle>
        <DialogContent>
          {depositStep === 'amount' && (
            <>
              {/* Ch·ªçn s·ªë ti·ªÅn c√≥ s·∫µn */}
              <Typography variant="h6" sx={{ mb: 2 }}>Ch·ªçn s·ªë ti·ªÅn</Typography>
              <Stack direction="row" spacing={1} sx={{ mb: 3, flexWrap: 'wrap' }}>
                {presetAmounts.map((presetAmount) => (
                  <Button
                    key={presetAmount}
                    variant={depositAmount === (presetAmount / 1000).toString() ? 'contained' : 'outlined'}
                    onClick={() => handlePresetAmount(presetAmount)}
                    sx={{ minWidth: 100 }}
                  >
                    {(presetAmount / 1000).toLocaleString()}k
                  </Button>
                ))}
              </Stack>

              {/* S·ªë ti·ªÅn t√πy ch·ªânh */}
              <TextField
                label="S·ªë ti·ªÅn t√πy ch·ªânh (ngh√¨n ƒë·ªìng)"
                type="number"
                value={customDepositAmount}
                onChange={(e) => handleCustomAmount(e.target.value)}
                placeholder="Nh·∫≠p s·ªë ti·ªÅn (VD: 100 = 100,000 VND)"
                helperText="T·ªëi thi·ªÉu 10,000 VND"
                fullWidth
                sx={{ mb: 2 }}
              />

              {/* Hi·ªÉn th·ªã s·ªë ti·ªÅn ƒë√£ ch·ªçn */}
              {depositAmount && (
                <Alert severity="info" sx={{ mb: 2 }}>
                  S·ªë ti·ªÅn n·∫°p: {(parseFloat(depositAmount) * 1000).toLocaleString()} VND
                </Alert>
              )}
            </>
          )}

          {depositStep === 'qr' && (
            <>
              {/* Hi·ªÉn th·ªã QR Code */}
              <Box sx={{ textAlign: 'center' }}>
                <Typography variant="h6" color="success.main" sx={{ mb: 2 }}>
                  Qu√©t m√£ QR ƒë·ªÉ thanh to√°n
                </Typography>
                
                <Box sx={{ p: 2, border: '2px solid #e0e0e0', borderRadius: 2, mb: 2, display: 'inline-block' }}>
                  <img src={qrCode} alt="QR Code" style={{ maxWidth: '100%', height: 'auto' }} />
                </Box>
                
                <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                  M·ªü ·ª©ng d·ª•ng MoMo v√† qu√©t m√£ QR n√†y ƒë·ªÉ thanh to√°n
                </Typography>

                {/* H∆∞·ªõng d·∫´n */}
                <Alert severity="warning" sx={{ mb: 2, textAlign: 'left' }}>
                  <Typography variant="subtitle2" sx={{ mb: 1 }}>H∆∞·ªõng d·∫´n thanh to√°n:</Typography>
                  <Box component="div" sx={{ fontSize: '0.875rem' }}>
                    1. M·ªü ·ª©ng d·ª•ng MoMo tr√™n ƒëi·ªán tho·∫°i<br/>
                    2. Ch·ªçn "Qu√©t m√£ QR"<br/>
                    3. Qu√©t m√£ QR ·ªü tr√™n<br/>
                    4. X√°c nh·∫≠n thanh to√°n<br/>
                    5. Ti·ªÅn s·∫Ω ƒë∆∞·ª£c n·∫°p v√†o v√≠
                  </Box>
                </Alert>

                {isPolling && (
                  <Alert severity="info">
                    ƒêang ki·ªÉm tra giao d·ªãch... Vui l√≤ng ch·ªù trong gi√¢y l√°t.
                  </Alert>
                )}
              </Box>
            </>
          )}
        </DialogContent>
        <DialogActions>
          {depositStep === 'amount' && (
            <>
              <Button onClick={resetDepositModal}>H·ªßy</Button>
              <Button
                onClick={handleDeposit}
                variant="contained"
                color="success"
                disabled={!depositAmount || processing}
              >
                {processing ? 'ƒêang x·ª≠ l√Ω...' : 'N·∫°p ti·ªÅn qua MoMo'}
              </Button>
            </>
          )}
          {depositStep === 'qr' && (
            <Button onClick={() => setDepositStep('amount')} variant="outlined">
              Quay l·∫°i
            </Button>
          )}
        </DialogActions>
      </Dialog>

      {/* Withdraw Dialog */}
      <Dialog open={withdrawDialogOpen} onClose={() => setWithdrawDialogOpen(false)} maxWidth="sm" fullWidth>
        <DialogTitle>R√∫t ti·ªÅn</DialogTitle>
        <DialogContent>
          <Stack spacing={3} sx={{ mt: 1 }}>
            <TextField
              label="S·ªë ti·ªÅn (VND)"
              type="number"
              value={withdrawAmount}
              onChange={(e) => setWithdrawAmount(e.target.value)}
              placeholder="50000"
              helperText="T·ªëi thi·ªÉu 50,000 VND"
              fullWidth
            />
            <TextField
              label="S·ªë ƒëi·ªán tho·∫°i MoMo"
              type="tel"
              value={withdrawPhone}
              onChange={(e) => setWithdrawPhone(e.target.value)}
              placeholder="0123456789"
              fullWidth
            />
            <Alert severity="info">
              Ti·ªÅn s·∫Ω ƒë∆∞·ª£c chuy·ªÉn v√†o t√†i kho·∫£n MoMo trong v√≤ng 24h
            </Alert>
          </Stack>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setWithdrawDialogOpen(false)}>H·ªßy</Button>
          <Button 
            onClick={handleWithdraw} 
            variant="contained" 
            disabled={processing || !withdrawAmount || !withdrawPhone}
          >
            {processing ? 'ƒêang x·ª≠ l√Ω...' : 'R√∫t ti·ªÅn'}
          </Button>
        </DialogActions>
      </Dialog>
    </div>
  );
}
