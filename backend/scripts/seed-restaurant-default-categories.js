const mongoose = require('mongoose');
require('dotenv').config();

// Connect to MongoDB
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/eatnow', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Category Schema
const categorySchema = new mongoose.Schema({
  restaurantId: { type: mongoose.Schema.Types.ObjectId, ref: 'Restaurant', required: false },
  name: { type: String, required: true },
  slug: { type: String, required: true, unique: true },
  description: { type: String, default: '' },
  icon: { type: String, default: 'üçΩÔ∏è' },
  color: { type: String, default: 'from-gray-400 to-gray-500' },
  position: { type: Number, default: 0 },
  isActive: { type: Boolean, default: true },
  imageUrl: { type: String, default: '' },
}, { timestamps: true });

const Category = mongoose.model('Category', categorySchema);

// Default categories for new restaurants
const defaultCategories = [
  {
    name: 'M√≥n ch√≠nh',
    slug: 'mon-chinh',
    description: 'C√°c m√≥n ƒÉn ch√≠nh c·ªßa nh√† h√†ng',
    icon: 'üçΩÔ∏è',
    color: 'from-orange-400 to-red-500',
    position: 1,
    isActive: true
  },
  {
    name: 'M√≥n th√™m',
    slug: 'mon-them',
    description: 'C√°c m√≥n ƒÉn k√®m, m√≥n ph·ª•',
    icon: 'ü•ó',
    color: 'from-green-400 to-emerald-500',
    position: 2,
    isActive: true
  },
  {
    name: 'Gi·∫£i kh√°t',
    slug: 'giai-khat',
    description: 'N∆∞·ªõc u·ªëng, ƒë·ªì gi·∫£i kh√°t',
    icon: 'ü•§',
    color: 'from-blue-400 to-cyan-500',
    position: 3,
    isActive: true
  },
  {
    name: 'ƒê·ªì ƒÉn v·∫∑t',
    slug: 'do-an-vat',
    description: 'Snack, ƒë·ªì ƒÉn v·∫∑t',
    icon: 'üçø',
    color: 'from-yellow-400 to-orange-500',
    position: 4,
    isActive: true
  },
  {
    name: 'Tr√°ng mi·ªáng',
    slug: 'trang-mieng',
    description: 'B√°nh ng·ªçt, kem, ch√®',
    icon: 'üç∞',
    color: 'from-pink-400 to-purple-500',
    position: 5,
    isActive: true
  }
];

async function seedDefaultCategoriesForRestaurant(restaurantId) {
  try {
    console.log(`üå± Seeding default categories for restaurant: ${restaurantId}`);
    
    // Check if restaurant already has categories
    const existingCategories = await Category.find({ restaurantId: new mongoose.Types.ObjectId(restaurantId) });
    if (existingCategories.length > 0) {
      console.log(`‚ö†Ô∏è  Restaurant ${restaurantId} already has ${existingCategories.length} categories. Skipping...`);
      return;
    }

    // Create default categories for this restaurant
    const categoriesToCreate = defaultCategories.map(cat => ({
      ...cat,
      restaurantId: new mongoose.Types.ObjectId(restaurantId),
      slug: `${cat.slug}-${restaurantId}` // Make slug unique per restaurant
    }));

    const createdCategories = await Category.insertMany(categoriesToCreate);
    console.log(`‚úÖ Created ${createdCategories.length} default categories for restaurant ${restaurantId}:`);
    createdCategories.forEach(cat => {
      console.log(`   - ${cat.name} (${cat.slug})`);
    });

    return createdCategories;
  } catch (error) {
    console.error(`‚ùå Error seeding categories for restaurant ${restaurantId}:`, error.message);
    throw error;
  }
}

async function seedAllRestaurants() {
  try {
    // Get all restaurants
    const Restaurant = mongoose.model('Restaurant', new mongoose.Schema({}, { strict: false }));
    const restaurants = await Restaurant.find({});
    
    console.log(`üè™ Found ${restaurants.length} restaurants`);
    
    for (const restaurant of restaurants) {
      await seedDefaultCategoriesForRestaurant(restaurant._id);
    }
    
    console.log('üéâ Completed seeding default categories for all restaurants!');
  } catch (error) {
    console.error('‚ùå Error seeding all restaurants:', error.message);
  } finally {
    mongoose.connection.close();
  }
}

// Run the script
if (require.main === module) {
  const restaurantId = process.argv[2];
  
  if (restaurantId) {
    // Seed for specific restaurant
    seedDefaultCategoriesForRestaurant(restaurantId)
      .then(() => {
        console.log('‚úÖ Done!');
        mongoose.connection.close();
      })
      .catch(error => {
        console.error('‚ùå Error:', error.message);
        mongoose.connection.close();
      });
  } else {
    // Seed for all restaurants
    seedAllRestaurants();
  }
}

module.exports = { seedDefaultCategoriesForRestaurant };
