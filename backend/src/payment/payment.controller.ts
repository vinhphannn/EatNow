import { Controller, Post, Body, Get, Param, Req, UseGuards } from '@nestjs/common';
import { MomoService } from './momo.service';
import { WalletService } from '../wallet/wallet.service';
import { JwtAuthGuard } from '../auth/jwt-auth.guard';
import { Logger } from '@nestjs/common';

/**
 * Payment Controller - X·ª≠ l√Ω thanh to√°n qua MoMo v√† c√°c providers kh√°c
 * 
 * Endpoints:
 * - POST /payment/deposit - N·∫°p ti·ªÅn v√†o v√≠ qua MoMo
 * - POST /payment/withdraw - R√∫t ti·ªÅn t·ª´ v√≠ ra MoMo
 * - POST /payment/order - Thanh to√°n ƒë∆°n h√†ng
 * - POST /payment/callback - MoMo callback handler
 * - GET /payment/:transactionId - L·∫•y th√¥ng tin giao d·ªãch
 */
@Controller('payment')
export class PaymentController {
  private readonly logger = new Logger(PaymentController.name);

  constructor(
    private readonly momoService: MomoService,
    private readonly walletService: WalletService,
  ) {}

  /**
   * N·∫°p ti·ªÅn v√†o v√≠ qua MoMo
   * POST /api/v1/payment/deposit
   * Body: { amount, provider, ownerType }
   */
  @Post('deposit')
  @UseGuards(JwtAuthGuard)
  async deposit(@Req() req: any, @Body() body: { amount: number; provider: string; ownerType?: string }) {
    try {
      const userId = req.user.id;
      const ownerType: 'customer' | 'restaurant' | 'driver' | 'admin' = 
        (body.ownerType || this.detectOwnerType(req.user)) as any;
      
      this.logger.log(`N·∫°p ti·ªÅn: userId=${userId}, amount=${body.amount}, provider=${body.provider}`);

      // T·∫°o transaction trong database (pending)
      const transaction = await this.walletService.depositViaProvider(
        ownerType,
        userId,
        body.amount,
        body.provider
      );

      // N·∫øu provider l√† MoMo, t·∫°o payment URL
      if (body.provider === 'momo') {
        const paymentUrl = await this.momoService.createPaymentUrl({
          orderId: transaction._id.toString(),
          orderInfo: `N·∫°p ti·ªÅn v√†o v√≠ ${body.amount} VND`,
          amount: body.amount,
          extraData: JSON.stringify({ transactionId: transaction._id.toString(), ownerType }),
        });

        // Update transaction v·ªõi payment URL
        await this.walletService.updateTransactionProviderUrl(
          transaction._id.toString(),
          paymentUrl.payUrl
        );

        this.logger.log(`‚úÖ Returning payment response:`, {
          success: true,
          transactionId: transaction._id.toString(),
          paymentUrl: paymentUrl.payUrl,
          redirectUrl: paymentUrl.payUrl,
        });

        return {
          success: true,
          transactionId: transaction._id.toString(),
          paymentUrl: paymentUrl.payUrl,
          redirectUrl: paymentUrl.payUrl,
        };
      }

      return {
        success: true,
        transactionId: transaction._id.toString(),
        message: 'ƒêang x·ª≠ l√Ω thanh to√°n',
      };

    } catch (error) {
      this.logger.error(`L·ªói n·∫°p ti·ªÅn: ${error.message}`, error.stack);
      throw error;
    }
  }

  /**
   * R√∫t ti·ªÅn t·ª´ v√≠
   * POST /api/v1/payment/withdraw
   * Body: { amount, provider, phoneNumber }
   */
  @Post('withdraw')
  @UseGuards(JwtAuthGuard)
  async withdraw(@Req() req: any, @Body() body: { amount: number; provider: string; phoneNumber?: string }) {
    try {
      const userId = req.user.id;
      const ownerType = this.detectOwnerType(req.user);
      
      this.logger.log(`R√∫t ti·ªÅn: userId=${userId}, amount=${body.amount}, provider=${body.provider}`);

      // T·∫°o transaction v√† tr·ª´ balance
      const transaction = await this.walletService.withdrawFromWallet(
        ownerType,
        userId,
        body.amount,
        body.provider,
        body.phoneNumber
      );

      return {
        success: true,
        transactionId: transaction._id.toString(),
        status: 'processing',
        message: 'Y√™u c·∫ßu r√∫t ti·ªÅn ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω',
      };

    } catch (error) {
      this.logger.error(`L·ªói r√∫t ti·ªÅn: ${error.message}`, error.stack);
      throw error;
    }
  }

  /**
   * Thanh to√°n ƒë∆°n h√†ng qua MoMo
   * POST /api/v1/payment/order
   * Body: { orderId, amount, orderCode }
   */
  @Post('order')
  @UseGuards(JwtAuthGuard)
  async payOrder(@Req() req: any, @Body() body: { orderId: string; amount: number; orderCode: string; restaurantId: string; method?: 'wallet' | 'momo' }) {
    try {
      const userId = req.user.id;
      
      this.logger.log(`Thanh to√°n ƒë∆°n h√†ng: orderId=${body.orderId}, amount=${body.amount}`);

      // N·∫øu ch·ªçn thanh to√°n b·∫±ng v√≠
      if (body.method === 'wallet') {
        try {
          // ƒê·∫£m b·∫£o t·∫°o v√≠ nh√† h√†ng s·ªõm ƒë·ªÉ kh√¥ng x·∫£y ra t√¨nh tr·∫°ng ‚Äúkh√¥ng c√≥ v√≠‚Äù
          if (body.restaurantId) {
            await this.walletService.getWalletForActor('restaurant', body.restaurantId);
          }

          const tx = await this.walletService.payOrderFromWallet('customer', userId, body.amount, body.orderId, body.orderCode);
          // Ch·ªâ x√°c nh·∫≠n ƒë√£ gi·ªØ ti·ªÅn (escrow), credit cho nh√† h√†ng s·∫Ω th·ª±c hi·ªán khi ƒë∆°n delivered
          return { success: true, method: 'wallet', status: 'escrowed', transactionId: tx._id };
        } catch (err: any) {
          // S·ªë d∆∞ kh√¥ng ƒë·ªß ‚Üí y√™u c·∫ßu n·∫°p th√™m
          if (err?.message?.startsWith('S·ªë d∆∞ kh√¥ng ƒë·ªß')) {
            return { success: false, needDeposit: true, message: err.message };
          }
          throw err;
        }
      }

      // M·∫∑c ƒë·ªãnh: t·∫°o thanh to√°n qua MoMo
      // T·∫°o transaction trong database
      const transaction = await this.walletService.depositViaProvider(
        'customer',
        userId,
        body.amount,
        'momo',
        body.orderId
      );

      // T·∫°o MoMo payment URL
      const paymentUrl = await this.momoService.createPaymentUrl({
        orderId: transaction._id.toString(),
        orderInfo: `Thanh to√°n ƒë∆°n h√†ng #${body.orderCode}`,
        amount: body.amount,
        extraData: JSON.stringify({ 
          orderId: body.orderId,
          userId,
          transactionId: transaction._id.toString()
        }),
      });

      return {
        success: true,
        transactionId: transaction._id.toString(),
        paymentUrl: paymentUrl.payUrl,
        redirectUrl: paymentUrl.payUrl,
      };

    } catch (error) {
      this.logger.error(`L·ªói thanh to√°n ƒë∆°n h√†ng: ${error.message}`, error.stack);
      throw error;
    }
  }

  /**
   * Manual confirm deposit for testing
   * POST /api/v1/payment/confirm-deposit
   */
  @Post('confirm-deposit')
  @UseGuards(JwtAuthGuard)
  async confirmDeposit(@Req() req: any, @Body() body: { transactionId: string }) {
    try {
      const userId = req.user.id;
      this.logger.log(`Manual confirm deposit: userId=${userId}, transactionId=${body.transactionId}`);

      // Confirm deposit manually
      await this.walletService.confirmDeposit(
        body.transactionId,
        `manual_${Date.now()}`,
        { manual: true, userId }
      );

      this.logger.log(`‚úÖ Manual deposit confirmed: ${body.transactionId}`);

      return { 
        success: true, 
        message: 'Deposit confirmed successfully',
        transactionId: body.transactionId
      };

    } catch (error) {
      this.logger.error(`L·ªói manual confirm deposit: ${error.message}`, error.stack);
      return { success: false, message: error.message };
    }
  }

  @Post('test-confirm/:transactionId')
  @UseGuards(JwtAuthGuard)
  async testConfirmDeposit(@Param('transactionId') transactionId: string) {
    try {
      this.logger.log(`üß™ Test confirm deposit: ${transactionId}`);
      
      await this.walletService.confirmDeposit(
        transactionId,
        `test_${Date.now()}`,
        { test: true }
      );
      
      this.logger.log(`‚úÖ Test deposit confirmed: ${transactionId}`);
      
      return { 
        success: true, 
        message: 'Test deposit confirmed successfully',
        transactionId
      };
    } catch (error) {
      this.logger.error(`‚ùå Test confirm failed: ${error.message}`, error.stack);
      return { success: false, message: error.message };
    }
  }
  @Post('momo/callback')
  async momoCallback(@Body() callbackData: any) {
    try {
      this.logger.log(`üîî MoMo callback received: ${JSON.stringify(callbackData)}`);

      // Verify signature
      const isValid = this.momoService.verifyCallback(callbackData);
      if (!isValid) {
        this.logger.error('‚ùå Invalid MoMo callback signature');
        return { success: false, message: 'Invalid signature' };
      }

      const { orderId, amount, extraData, resultCode } = callbackData;

      // Parse extraData ƒë·ªÉ l·∫•y transactionId
      const parsedData = JSON.parse(extraData || '{}');
      const transactionId = parsedData.transactionId || orderId;

      this.logger.log(`üîÑ Processing callback for transactionId: ${transactionId}, amount: ${amount}`);

      if (Number(resultCode) === 0) {
        // Update transaction status to completed
        await this.walletService.confirmDeposit(
          transactionId,
          callbackData.transactionId || orderId,
          callbackData
        );
        this.logger.log(`‚úÖ Transaction confirmed: ${transactionId}`);
        return { success: true, message: 'Payment processed successfully' };
      } else {
        // ƒê√°nh d·∫•u th·∫•t b·∫°i/cancelled v√† ho√†n pendingBalance
        const status = Number(resultCode) === 1006 ? 'cancelled' : 'failed';
        await this.walletService.updateTransactionStatus(transactionId, status);
        this.logger.warn(`‚ö†Ô∏è Transaction ${transactionId} marked as ${status} (resultCode=${resultCode})`);
        return { success: false, message: 'Payment failed', resultCode };
      }

    } catch (error) {
      this.logger.error(`‚ùå L·ªói x·ª≠ l√Ω MoMo callback: ${error.message}`, error.stack);
      return { success: false, message: error.message };
    }
  }

  /**
   * Test MoMo callback manually
   * POST /api/v1/payment/test-callback
   */
  @Post('test-callback')
  async testCallback(@Body() body: { transactionId: string; amount: number }) {
    try {
      this.logger.log(`üß™ Testing callback for transactionId: ${body.transactionId}`);

      // Simulate MoMo callback data
      const mockCallbackData = {
        orderId: body.transactionId,
        amount: body.amount,
        resultCode: 0,
        message: 'Success',
        extraData: JSON.stringify({ transactionId: body.transactionId }),
        transactionId: `momo_${Date.now()}`,
        signature: 'test_signature'
      };

      // Process callback
      await this.walletService.confirmDeposit(
        body.transactionId,
        mockCallbackData.transactionId,
        mockCallbackData
      );

      this.logger.log(`‚úÖ Test callback successful: ${body.transactionId}`);

      return { 
        success: true, 
        message: 'Test callback processed successfully',
        transactionId: body.transactionId
      };

    } catch (error) {
      this.logger.error(`‚ùå Test callback failed: ${error.message}`, error.stack);
      return { success: false, message: error.message };
    }
  }

  /**
   * Test endpoint - kh√¥ng c·∫ßn auth
   * GET /api/v1/payment/test
   */
  @Get('test')
  async test() {
    return { message: 'Payment controller is working', timestamp: new Date().toISOString() };
  }

  /**
   * Check transaction status
   * GET /api/v1/payment/check/:transactionId
   */
  @Get('check/:transactionId')
  @UseGuards(JwtAuthGuard)
  async checkTransaction(@Param('transactionId') transactionId: string) {
    try {
      this.logger.log(`üîç Checking transaction: ${transactionId}`);

      let transaction = await this.walletService.getTransactionById(transactionId);
      
      if (!transaction) {
        return { success: false, message: 'Transaction not found' };
      }

      // Auto-cancel n·∫øu pending qu√° h·∫°n (v√≠ d·ª• > 120s k·ªÉ t·ª´ khi t·∫°o)
      if (transaction.status === 'pending' && transaction.createdAt) {
        const createdAtMs = new Date(transaction.createdAt as any).getTime();
        const ageMs = Date.now() - createdAtMs;
        const expiryMs = 120 * 1000; // 2 ph√∫t
        if (ageMs > expiryMs) {
          await this.walletService.updateTransactionStatus(transactionId, 'cancelled');
          transaction = await this.walletService.getTransactionById(transactionId);
          this.logger.warn(`‚è∞ Transaction ${transactionId} expired -> cancelled`);
        }
      }

      return {
        success: true,
        transaction: {
          id: transaction._id,
          status: transaction.status,
          amount: transaction.amount,
          type: transaction.type,
          description: transaction.description,
          createdAt: transaction.createdAt,
          updatedAt: transaction.updatedAt
        }
      };

    } catch (error) {
      this.logger.error(`‚ùå Error checking transaction: ${error.message}`, error.stack);
      return { success: false, message: error.message };
    }
  }

  /**
   * L·∫•y th√¥ng tin giao d·ªãch
   * GET /api/v1/payment/transaction/:transactionId
   */
  @Get('transaction/:transactionId')
  @UseGuards(JwtAuthGuard)
  async getTransaction(@Param('transactionId') transactionId: string, @Req() req: any) {
    const userId = req.user.id;
    
    // TODO: Implement get transaction logic
    return {
      transactionId,
      status: 'pending',
      message: 'Transaction info not yet implemented',
    };
  }

  /**
   * Detect owner type t·ª´ user object
   */
  private detectOwnerType(user: any): 'customer' | 'restaurant' | 'driver' | 'admin' {
    if (user.role === 'customer') return 'customer';
    if (user.role === 'restaurant') return 'restaurant';
    if (user.role === 'driver') return 'driver';
    return 'admin';
  }
}

