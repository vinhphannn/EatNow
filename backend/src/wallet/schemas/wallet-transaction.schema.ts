import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document, Types } from 'mongoose';

export type WalletTransactionDocument = WalletTransaction & Document;

/**
 * Wallet Transaction Schema - Giao dịch trong ví
 * 
 * Types:
 * - deposit: Nạp tiền vào ví
 * - withdraw: Rút tiền từ ví ra MoMo/ZaloPay
 * - order_payment: Khách hàng thanh toán đơn hàng
 * - order_revenue: Nhà hàng nhận tiền từ đơn hàng
 * - commission: Tài xế nhận tiền từ đơn hàng
 * - platform_fee: Platform thu phí
 * - refund: Hoàn tiền
 * - transfer: Chuyển tiền giữa các ví
 */
@Schema({ timestamps: true })
export class WalletTransaction {
  @Prop({ required: true, type: Types.ObjectId, ref: 'Wallet' })
  walletId: Types.ObjectId;

  // Actor reference - CHỈ CẦN 1 trong 4 trường này
  @Prop({ type: Types.ObjectId, ref: 'User' })
  userId?: Types.ObjectId;

  @Prop({ type: Types.ObjectId, ref: 'Restaurant' })
  restaurantId?: Types.ObjectId;

  @Prop({ type: Types.ObjectId, ref: 'Driver' })
  driverId?: Types.ObjectId;

  @Prop({ default: false })
  isSystemTransaction?: boolean;  // true nếu là giao dịch system

  // Transaction info
  @Prop({ required: true, enum: [
    'deposit',      // Nạp tiền vào ví
    'withdraw',     // Rút tiền từ ví
    'order_payment',// Khách trả tiền đơn hàng
    'order_revenue',// Nhà hàng nhận tiền
    'commission',   // Tài xế nhận tiền
    'platform_fee', // Platform thu phí
    'refund',       // Hoàn tiền
    'transfer',      // Chuyển tiền nội bộ
    'fee'           // Phí khác
  ]})
  type: string;

  @Prop({ required: true })
  amount: number;  // Số tiền (âm nếu là chi, dương nếu là thu)

  @Prop()
  description: string;  // Mô tả giao dịch

  @Prop({ required: true, enum: ['pending', 'completed', 'failed', 'cancelled'], default: 'pending' })
  status: string;

  // MoMo Integration fields
  @Prop()
  provider?: string;  // 'momo', 'zalopay', 'cash', 'bank_transfer'

  @Prop()
  providerTransactionId?: string;  // Transaction ID từ MoMo/ZaloPay

  @Prop()
  providerPaymentUrl?: string;  // URL thanh toán (redirect user)

  @Prop({ type: Object })
  providerCallback?: any;  // Raw callback data từ provider

  // References
  @Prop({ type: Types.ObjectId, ref: 'Order' })
  orderId?: Types.ObjectId;

  @Prop()
  orderCode?: string;

  // Additional metadata
  @Prop({ type: Object })
  metadata?: any;

  // Timestamps (auto-generated by Mongoose)
  createdAt?: Date;
  updatedAt?: Date;
}

export const WalletTransactionSchema = SchemaFactory.createForClass(WalletTransaction);

// Indexes cho query nhanh
WalletTransactionSchema.index({ walletId: 1, createdAt: -1 });
WalletTransactionSchema.index({ userId: 1, status: 1 });
WalletTransactionSchema.index({ restaurantId: 1, status: 1 });
WalletTransactionSchema.index({ driverId: 1, status: 1 });
WalletTransactionSchema.index({ orderId: 1 });
WalletTransactionSchema.index({ providerTransactionId: 1 });
WalletTransactionSchema.index({ type: 1, status: 1 });

// Idempotency/duplicate prevention
WalletTransactionSchema.index(
  { providerTransactionId: 1 },
  { unique: true, sparse: true } as any
);
// Không tạo 2 giao dịch thanh toán cho cùng order
WalletTransactionSchema.index(
  { type: 1, orderId: 1 },
  { unique: true, sparse: true, partialFilterExpression: { type: 'order_payment', orderId: { $exists: true } } } as any
);

// ✅ Unique indexes để tránh duplicate transactions
// Tránh trừ tiền 2 lần cho cùng 1 đơn hàng
// (Idempotency dùng các index phía trên; tránh dùng giá trị cụ thể trong key index)