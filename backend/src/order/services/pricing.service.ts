/**
 * Pricing Service - T√≠nh to√°n ti·ªÅn b·∫£o m·∫≠t ·ªü backend
 * 
 * Ch·ª©c nƒÉng:
 * - T√≠nh to√°n t·∫•t c·∫£ c√°c lo·∫°i ph√≠ v√† chi·∫øt kh·∫•u
 * - ƒê·∫£m b·∫£o t√≠nh to√°n ch√≠nh x√°c v√† b·∫£o m·∫≠t
 * - H·ªó tr·ª£ c√°c tr∆∞·ªùng m·ªõi trong Order schema
 */

import { Injectable, Logger } from '@nestjs/common';
import { DistanceService } from '../../common/services/distance.service';

export interface PricingConfig {
  // Ph√≠ platform
  platformFeeRate: number; // % ph√≠ platform
  
  // Ph√≠ c·ªë ƒë·ªãnh
  doorFeeAmount: number; // Ph√≠ giao t·∫≠n c·ª≠a
  
  // Chi·∫øt kh·∫•u t√†i x·∫ø
  driverCommissionRate: number; // % chi·∫øt kh·∫•u t√†i x·∫ø (thu t·ª´ ph√≠ giao h√†ng)
}

export interface OrderPricingInput {
  subtotal: number; // Ti·ªÅn m√≥n ƒÉn
  deliveryFee: number; // Ph√≠ giao h√†ng
  tip: number; // Th∆∞·ªüng t√†i x·∫ø
  doorFee: boolean; // C√≥ giao t·∫≠n c·ª≠a kh√¥ng
}

export interface OrderPricingResult {
  // C√°c tr∆∞·ªùng c∆° b·∫£n
  subtotal: number;
  deliveryFee: number;
  tip: number;
  doorFee: number;
  finalTotal: number;
  
  // C√°c tr∆∞·ªùng m·ªõi
  customerPayment: number; // Ti·ªÅn kh√°ch tr·∫£
  restaurantRevenue: number; // Ti·ªÅn qu√°n nh·∫≠n (sau khi tr·ª´ ph√≠ platform)
  driverPayment: number; // Ti·ªÅn t√†i x·∫ø nh·∫≠n (sau khi tr·ª´ chi·∫øt kh·∫•u 30%)
  
  // Ph√≠ platform
  platformFeeRate: number;
  platformFeeAmount: number;
  
  // Chi·∫øt kh·∫•u t√†i x·∫ø
  driverCommissionRate: number; // T·ª∑ l·ªá chi·∫øt kh·∫•u t√†i x·∫ø
  driverCommissionAmount: number; // S·ªë ti·ªÅn chi·∫øt kh·∫•u t√†i x·∫ø
}

@Injectable()
export class PricingService {
  private readonly logger = new Logger(PricingService.name);
  
  constructor(
    private readonly distanceService: DistanceService
  ) {}
  
  // C·∫•u h√¨nh m·∫∑c ƒë·ªãnh
  private readonly defaultConfig: PricingConfig = {
    platformFeeRate: 10, // Platform thu 10% t·ª´ qu√°n
    doorFeeAmount: 5000, // 5k ph√≠ giao t·∫≠n c·ª≠a
    driverCommissionRate: 30, // Platform thu 30% t·ª´ ph√≠ giao h√†ng
  };

  /**
   * T√≠nh to√°n gi√° c·∫£ cho ƒë∆°n h√†ng
   * 
   * C√îNG TH·ª®C T√çNH TI·ªÄN:
   * ============================================================
   * 1. Ti·ªÅn kh√°ch tr·∫£ (customerPayment):
   *    = subtotal + deliveryFee + tip + doorFee
   * 
   * 2. Ti·ªÅn qu√°n nh·∫≠n (restaurantRevenue):
   *    = subtotal - platformFee
   * 
   * 3. Ti·ªÅn t√†i x·∫ø nh·∫≠n (driverPayment):
   *    = (deliveryFee - commission) + tip + doorFee
   * 
   * 4. Ti·ªÅn platform thu:
   *    = platformFee (t·ª´ qu√°n) + commission (t·ª´ t√†i x·∫ø)
   * 
   * KI·ªÇM TRA:
   * customerPayment = restaurantRevenue + driverPayment + platformFee + commission
   * 
   * V√ç D·ª§ (150k subtotal, 20k delivery, 10k tip, 5k door):
   * - Kh√°ch tr·∫£: 150k + 20k + 10k + 5k = 185k
   * - Qu√°n nh·∫≠n: 150k - 15k = 135k
   * - T√†i x·∫ø nh·∫≠n: (20k - 6k) + 10k + 5k = 29k
   * - Platform thu: 15k (t·ª´ qu√°n) + 6k (t·ª´ t√†i x·∫ø) = 21k
   * - T·ªïng: 135k + 29k + 21k = 185k ‚úÖ
   * ============================================================
   */
  calculateOrderPricing(input: OrderPricingInput, config?: Partial<PricingConfig>): OrderPricingResult {
    const finalConfig = { ...this.defaultConfig, ...config };
    
    this.logger.log('üîç Calculating order pricing:', { input, config: finalConfig });
    
    // T√≠nh ph√≠ platform (ch·ªâ t·ª´ ti·ªÅn m√≥n ƒÉn)
    const platformFeeAmount = this.calculateDiscountAmount(input.subtotal, finalConfig.platformFeeRate);
    
    // T√≠nh chi·∫øt kh·∫•u t√†i x·∫ø (30% t·ª´ ph√≠ giao h√†ng)
    const driverCommissionRate = finalConfig.driverCommissionRate;
    const driverCommissionAmount = this.calculateDiscountAmount(input.deliveryFee, driverCommissionRate);
    
    // T√≠nh ph√≠ giao t·∫≠n c·ª≠a
    const doorFeeAmount = input.doorFee ? finalConfig.doorFeeAmount : 0;
    
    // T√≠nh finalTotal (ti·ªÅn kh√°ch ph·∫£i tr·∫£)
    const finalTotal = input.subtotal + input.deliveryFee + input.tip + doorFeeAmount;
    
    // T√≠nh ti·ªÅn qu√°n nh·∫≠n ƒë∆∞·ª£c (sau khi tr·ª´ ph√≠ platform)
    const restaurantRevenue = input.subtotal - platformFeeAmount;
    
    // T√≠nh ti·ªÅn t√†i x·∫ø nh·∫≠n ƒë∆∞·ª£c
    // = (ph√≠ giao h√†ng - chi·∫øt kh·∫•u 30%) + tip + doorFee
    const driverPayment = input.deliveryFee + input.tip + doorFeeAmount - driverCommissionAmount;
    
    const result: OrderPricingResult = {
      // C√°c tr∆∞·ªùng c∆° b·∫£n
      subtotal: input.subtotal,
      deliveryFee: input.deliveryFee,
      tip: input.tip,
      doorFee: doorFeeAmount,
      finalTotal,
      
      // C√°c tr∆∞·ªùng m·ªõi
      customerPayment: finalTotal,
      restaurantRevenue,
      driverPayment,
      
      // Ph√≠ platform
      platformFeeRate: finalConfig.platformFeeRate,
      platformFeeAmount,
      
      // Chi·∫øt kh·∫•u t√†i x·∫ø
      driverCommissionRate,
      driverCommissionAmount,
    };
    
    this.logger.log('üîç Pricing calculation result:', result);
    
    // Validate k·∫øt qu·∫£
    this.validatePricingResult(result);
    
    return result;
  }

  /**
   * T√≠nh s·ªë ti·ªÅn chi·∫øt kh·∫•u t·ª´ t·ª∑ l·ªá ph·∫ßn trƒÉm
   */
  private calculateDiscountAmount(amount: number, rate: number): number {
    if (rate <= 0) return 0;
    return Math.round(amount * (rate / 100));
  }

  /**
   * Validate k·∫øt qu·∫£ t√≠nh to√°n
   */
  private validatePricingResult(result: OrderPricingResult): void {
    // Ki·ªÉm tra c√°c gi√° tr·ªã kh√¥ng √¢m
    if (result.customerPayment < 0) {
      throw new Error('Customer payment cannot be negative');
    }
    
    if (result.restaurantRevenue < 0) {
      throw new Error('Restaurant revenue cannot be negative');
    }
    
    if (result.driverPayment < 0) {
      throw new Error('Driver payment cannot be negative');
    }
    
    if (result.platformFeeAmount < 0) {
      throw new Error('Platform fee cannot be negative');
    }
    
    if (result.driverCommissionAmount < 0) {
      throw new Error('Driver commission cannot be negative');
    }
    
    // Ki·ªÉm tra logic t√≠nh to√°n - Final Total
    const expectedFinalTotal = result.subtotal + result.deliveryFee + result.tip + result.doorFee;
    if (Math.abs(result.finalTotal - expectedFinalTotal) > 1) { // Cho ph√©p sai s·ªë 1ƒë do l√†m tr√≤n
      throw new Error(`Final total calculation error: expected ${expectedFinalTotal}, got ${result.finalTotal}`);
    }
    
    // Ki·ªÉm tra customerPayment ph·∫£i b·∫±ng finalTotal
    if (Math.abs(result.customerPayment - result.finalTotal) > 1) {
      throw new Error(`Customer payment mismatch: expected ${result.finalTotal}, got ${result.customerPayment}`);
    }
    
    // Ki·ªÉm tra restaurant revenue
    const expectedRestaurantRevenue = result.subtotal - result.platformFeeAmount;
    if (Math.abs(result.restaurantRevenue - expectedRestaurantRevenue) > 1) {
      throw new Error(`Restaurant revenue calculation error: expected ${expectedRestaurantRevenue}, got ${result.restaurantRevenue}`);
    }
    
    // Ki·ªÉm tra driver payment
    const expectedDriverPayment = result.deliveryFee + result.tip + result.doorFee - result.driverCommissionAmount;
    if (Math.abs(result.driverPayment - expectedDriverPayment) > 1) {
      throw new Error(`Driver payment calculation error: expected ${expectedDriverPayment}, got ${result.driverPayment}`);
    }
    
    // ‚ö†Ô∏è KI·ªÇM TRA QUAN TR·ªåNG NH·∫§T: T·ªîNG TI·ªÄN THU PH·∫¢I B·∫∞NG T·ªîNG TI·ªÄN CHI
    // Ti·ªÅn thu t·ª´ kh√°ch: customerPayment
    // Ti·ªÅn tr·∫£ cho qu√°n: restaurantRevenue (sau khi tr·ª´ platform fee)
    // Ti·ªÅn tr·∫£ cho t√†i x·∫ø: driverPayment (sau khi tr·ª´ commission)
    // Platform thu ƒë∆∞·ª£c: platformFeeAmount (t·ª´ qu√°n) + driverCommissionAmount (t·ª´ t√†i x·∫ø)
    
    // C√¥ng th·ª©c ƒë√∫ng:
    // customerPayment = restaurantRevenue + driverPayment + platformFeeAmount + driverCommissionAmount
    // (Platform ti·ªÅn ƒë√£ b·ªã tr·ª´ kh·ªèi restaurantRevenue v√† driverPayment r·ªìi)
    
    const totalRevenue = result.customerPayment;
    const totalDistributed = result.restaurantRevenue + result.driverPayment;
    const totalPlatformRevenue = result.platformFeeAmount + result.driverCommissionAmount;
    
    // Ki·ªÉm tra: Ti·ªÅn kh√°ch tr·∫£ = Ti·ªÅn tr·∫£ + Ti·ªÅn platform thu
    const expectedDistribution = result.restaurantRevenue + result.driverPayment + result.platformFeeAmount + result.driverCommissionAmount;
    
    if (Math.abs(totalRevenue - expectedDistribution) > 1) {
      throw new Error(
        `üí∞ MONEY BALANCE ERROR: Ti·ªÅn thu ${totalRevenue} ‚â† Ti·ªÅn ph√¢n b·ªï ${expectedDistribution}\n` +
        `   - Customer pays: ${result.customerPayment}\n` +
        `   - Restaurant receives: ${result.restaurantRevenue} (ƒë√£ tr·ª´ ${result.platformFeeAmount})\n` +
        `   - Driver receives: ${result.driverPayment} (ƒë√£ tr·ª´ ${result.driverCommissionAmount})\n` +
        `   - Platform collects: ${result.platformFeeAmount} (t·ª´ qu√°n) + ${result.driverCommissionAmount} (t·ª´ t√†i x·∫ø) = ${totalPlatformRevenue}\n` +
        `   - Difference: ${Math.abs(totalRevenue - expectedDistribution)}ƒë`
      );
    }
    
    this.logger.log(`‚úÖ Money balance verified: Customer pays ${totalRevenue}ƒë\n` +
      `   ‚Üí Restaurant: ${result.restaurantRevenue}ƒë + Platform fee: ${result.platformFeeAmount}ƒë\n` +
      `   ‚Üí Driver: ${result.driverPayment}ƒë + Commission: ${result.driverCommissionAmount}ƒë\n` +
      `   ‚Üí Total platform revenue: ${totalPlatformRevenue}ƒë`
    );
  }

  /**
   * T√≠nh ph√≠ giao h√†ng d·ª±a tr√™n kho·∫£ng c√°ch
   */
  calculateDeliveryFee(distanceKm: number): number {
    return this.distanceService.calculateDeliveryFee(distanceKm);
  }

  /**
   * T√≠nh th·ªùi gian giao h√†ng d·ª± ki·∫øn (tr·∫£ v·ªÅ s·ªë ph√∫t)
   */
  calculateEstimatedDeliveryTime(distanceKm: number): number {
    return this.distanceService.calculateEstimatedDeliveryTime(distanceKm);
  }

}
