// Script ƒë·ªÉ test API orders tr·ª±c ti·∫øp
const axios = require('axios');

const API_BASE = 'http://localhost:3001/api/v1';

async function testOrdersAPI() {
  try {
    console.log('üîç Testing Orders API...\n');

    // 1. Test v·ªõi token gi·∫£ (s·∫Ω fail)
    console.log('1Ô∏è‚É£ Testing with fake token:');
    try {
      const response = await axios.get(`${API_BASE}/orders/customer`, {
        headers: {
          'Authorization': 'Bearer fake-token'
        }
      });
      console.log('‚úÖ Response:', response.data);
    } catch (error) {
      console.log('‚ùå Expected error:', error.response?.status, error.response?.data?.message);
    }
    console.log('');

    // 2. Test kh√¥ng c√≥ token
    console.log('2Ô∏è‚É£ Testing without token:');
    try {
      const response = await axios.get(`${API_BASE}/orders/customer`);
      console.log('‚úÖ Response:', response.data);
    } catch (error) {
      console.log('‚ùå Expected error:', error.response?.status, error.response?.data?.message);
    }
    console.log('');

    // 3. Test v·ªõi token th·∫≠t (n·∫øu c√≥)
    const token = process.argv[2];
    if (token) {
      console.log('3Ô∏è‚É£ Testing with real token:');
      try {
        const response = await axios.get(`${API_BASE}/orders/customer`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        console.log('‚úÖ Response:', response.data);
        console.log('üì¶ Orders count:', response.data.length);
      } catch (error) {
        console.log('‚ùå Error:', error.response?.status, error.response?.data?.message);
      }
    } else {
      console.log('3Ô∏è‚É£ Skipping real token test (no token provided)');
      console.log('   To test with real token: node test-orders-api.js YOUR_JWT_TOKEN');
    }

  } catch (error) {
    console.error('‚ùå Unexpected error:', error.message);
  }
}

testOrdersAPI();






